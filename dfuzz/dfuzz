#!/usr/bin/env python
import os
import sys
import shutil
import logging
import optparse
import threading


from dfuzz.core import conf
from dfuzz.core import utils
from dfuzz.core import loader
from dfuzz.core import runner
from dfuzz.core import sanity

USAGE = '%prog [options] <dir>'
DESC = ''

def main():
    parser = optparse.OptionParser(usage=USAGE, description=DESC)
    parser.add_option('-v', '--verbose', action='store_true',
        help='Increase verbosity')
    parser.add_option('-d', '--debug', action='store_true',
        help='Turn on debugging messages')
    parser.add_option('-o', '--debug_output', action='store_true',
        help='Print stdout and stderr as debug messages')
    parser.add_option('-c', '--config', metavar='FNAME',
        help='Configuration file name', default='fuzz.conf')

    (opts, args) = parser.parse_args()

    lvl = logging.WARNING
    if opts.verbose:
        lvl = logging.INFO
    if opts.debug:
        lvl = logging.DEBUG

    fmt = '%(levelname)s: %(message)s'
    logging.basicConfig(format=fmt, level=lvl)

    logging.debug('Init done')
    if len(args) == 0:
        parser.error('no dir specified')

    work_dir = os.path.abspath(os.path.expanduser(args[0]))
    if not os.path.isdir(work_dir):
        logging.error('No such dir: "%s"' % work_dir)
        sys.exit(1)

    logging.debug('Work dir %s', work_dir)
    cfg_path = os.path.join(work_dir, opts.config)

    if not os.path.isfile(cfg_path):
        logging.error('Configuration file "%s" not found '
            'in: "%s"' % (opts.config, work_dir))
        sys.exit(1)

    if not os.access(cfg_path, os.R_OK):
        logging.error('Configuration file "%s" not readable, '
            ' dir: "%s"' % (opts.config, work_dir))
        sys.exit(1)

    cfg = conf.Config(work_dir)
    cfg.debug_output = opts.debug_output
    logging.debug('Configuration dump: %s', cfg.as_dict())

    if not sanity.value_validator(cfg):
        sys.exit(1)
    if not sanity.dir_integrity(cfg):
        sys.exit(1)

    sanity.check_no_fuzz_file(cfg)

    if not (cfg.generation or cfg.mutation or cfg.combination):
        logging.error('Nothing to do, set at least one mode '
            'in [global] section to 1 or create proper dirs')
        sys.exit(1)

    configured = cfg.binary
    cfg.binary = sanity.find_binary(cfg.binary, work_dir)
    if cfg.binary is None:
        logging.error('Binary specified in config "%s" not '
            'found (in %s, absolute path or $PATH) or permissions '
            'not set correctly (read, execute)', configured,
                work_dir)
        sys.exit(1)

    cfg.args = utils.parse_args(cfg.args)
    # init state variables
    cfg.num_incidents = 0
    cfg.handler_semaphore = threading.Semaphore()

    mloader = loader.ModuleLoader()

    if cfg.generation:
        mloader.add_valid_modules(cfg.generation_modules,
            cfg.generation_priority)
    if cfg.mutation:
        mloader.add_valid_modules(cfg.mutation_modules,
            cfg.mutation_priority)
    if cfg.combination:
        mloader.add_valid_modules(cfg.combination_modules,
            cfg.combination_priority)

    logging.debug('Loaded modules:')
    for mod in mloader.high_priority:
        logging.debug('[high priority] %s, args: %s', *mod)
    for mod in mloader.low_priority:
        logging.debug('[low priority] %s, args: %s', *mod)

    mrunner = runner.ModuleRunner(cfg, mloader.high_priority,
        mloader.low_priority)

    mrunner.run()

    shutil.rmtree(cfg.tmp_dir)

    if cfg.num_incidents > 0:
        logging.warning('%d incident(s) recorded', cfg.num_incidents)
        sys.exit(2)

if __name__ == "__main__":
    main()
