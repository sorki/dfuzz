#!/usr/bin/env python
import os
import sys
import optparse
import logging


from core import conf

USAGE = '%prog [options] <dir>'
DESC = ''

def main():
    parser = optparse.OptionParser(usage=USAGE, description=DESC)
    parser.add_option('-v', '--verbose', action='store_true',
        help='Increase verbosity')
    parser.add_option('-d', '--debug', action='store_true',
        help='Turn on debugging messages')
    parser.add_option('-c', '--config', metavar='FNAME',
        help='Configuration file name', default='fuzz.conf')

    (opts, args) = parser.parse_args()

    lvl = logging.WARNING
    if opts.verbose:
        lvl = logging.INFO
    if opts.debug:
        lvl = logging.DEBUG

    fmt = '%(levelname)s: %(message)s'
    logging.basicConfig(format=fmt, level=lvl)

    logging.debug('Init done')
    if len(args) == 0:
        parser.error('no dir specified')

    work_dir = os.path.abspath(os.path.expanduser(args[0]))
    if not os.path.isdir(work_dir):
        logging.error('No such dir: "%s"' % work_dir)
        sys.exit(1)

    logging.debug('Work dir %s', work_dir)
    cfg_path = os.path.join(work_dir, opts.config)

    if not os.path.isfile(cfg_path):
        logging.error('Configuration file "%s" not found '
            'in: "%s"' % (opts.config, work_dir))
        sys.exit(1)

    if not os.access(cfg_path, os.R_OK):
        logging.error('Configuration file "%s" not readable, '
            ' dir: "%s"' % (opts.config, work_dir))
        sys.exit(1)

    cfg = conf.Config(work_dir)
    logging.debug('Configuration dump: %s', cfg.as_dict())

    if not dir_integrity(work_dir, cfg):
        sys.exit(1)

    if not (cfg.generation or cfg.mutation or cfg.combination):
        logging.error('Nothing to do, set at least one mode '
            'in [global] section to 1 or create proper dirs')
        sys.exit(1)

def dir_integrity(work_dir, cfg_obj):
    '''
    Ensure work_dir integrity, update cfg_obj paths
    to absolute paths if necessary, create log and incidents
    sub directories
    '''

    sub_dirs = ['gen_dir', 'mut_dir', 'comb_dir', 
        'log_dir', 'incidents_dir']

    if not os.access(work_dir, os.W_OK):
        logging.error('Work dir "%s" must be writable' % work_dir)
        return False

    failure = False

    for d in sub_dirs:
        path = getattr(cfg_obj, d)
        if path[0] != '/':
            abspath = os.path.join(work_dir, path)
            setattr(cfg_obj, d, abspath)

        if d in ['log_dir', 'incidents_dir']:
            if not os.path.isdir(abspath):
                logging.info('Creating dir: %s [%s]' % (d, path))
                os.mkdir(abspath)

            if not os.access(abspath, os.W_OK):
                logging.error('No write perms for: %s [%s]' %
                    (d, abspath))
                failure = True

        if os.path.isdir(abspath) and not os.access(abspath, os.R_OK):
            logging.error('No read perms for: %s [%s]' % (d, abspath))
            failure = True

    modes = ['generation', 'mutation', 'combination']
    dirs =  ['gen_dir', 'mut_dir', 'comb_dir']

    for mode,modedir in zip(modes, dirs):
        if getattr(cfg_obj, mode):
            if not os.path.isdir(getattr(cfg_obj, modedir)):
                setattr(cfg_obj, mode, False)
                logging.warning('%s option is set to 1 but no '
                    '%s [%s] found, unsetting' % (mode, modedir,
                    getattr(cfg_obj, modedir)))


    return not failure


if __name__ == "__main__":
    main()
